#!/usr/bin/env sh

echo "🔍 Running pre-commit checks..."

# Run lint-staged
if ! bun lint-staged; then
  echo "❌ Linting and formatting failed. Please fix the issues before committing."
  exit 1
fi

# The rest of the pre-commit checks from the original file...

# Check for secrets or API keys in staged files (exclude lock files and this hook)
echo "🔒 Scanning for secrets..."
staged_files=$(git diff --cached --name-only | grep -v "\.lock$\|\.husky/pre-commit$" || true)
if [ -n "$staged_files" ]; then
  # Look for actual secret patterns, not references to the patterns or example keys
  # Exclude workflow files, test files, and blog posts
  secret_matches=$(echo "$staged_files" | grep -v "\.github/\|test\|spec\|\.md$" | xargs grep -l -E "(sk_live_[a-zA-Z0-9]+|pk_live_[a-zA-Z0-9]+|['\"]api_key['\"]:\s*['\"][a-zA-Z0-9]{20,}|['\"]secret_key['\"]:\s*['\"][a-zA-Z0-9]{20,}|password\s*=\s*['\"][^'\"]{8,})" 2>/dev/null || true)
  if [ -n "$secret_matches" ]; then
    echo "❌ Potential secrets found in staged files:"
    echo "$secret_matches" | xargs grep -n -E "(sk_live_[a-zA-Z0-9]+|pk_live_[a-zA-Z0-9]+|['\"]api_key['\"]:\s*['\"][a-zA-Z0-9]{20,}|['\"]secret_key['\"]:\s*['\"][a-zA-Z0-9]{20,}|password\s*=\s*['\"][^'\"]{8,})" 2>/dev/null
    echo "Please remove secrets before committing."
    exit 1
  fi
fi

# Validate frontmatter for any modified markdown files
echo "📝 Validating blog post frontmatter..."
modified_posts=$(git diff --cached --name-only | grep "src/posts/.*\.md$" || true)
if [ -n "$modified_posts" ]; then
  # Build to trigger validation (suppress output unless there are errors)
  if ! bun run build >/dev/null 2>&1; then
    echo "❌ Build failed, likely due to frontmatter validation errors."
    echo "Run 'bun run build' to see specific validation messages."
    exit 1
  fi
  
  # SEO validation for modified posts
  echo "🔍 Validating SEO compliance..."
  if ! echo "$modified_posts" | xargs bun run validate:seo 2>/dev/null; then
    echo "⚠️  SEO validation issues found. Run 'bun run validate:seo' for details."
    # Don't exit - just warn for SEO issues
  fi
}

# Generate blog images for any new or modified markdown files
if [ -n "$modified_posts" ]; then
  echo "🖼️  Generating blog images for modified posts..."
  bun run generate-blog-images >/dev/null 2>&1
  
  # Add any newly generated images to the commit
  git add public/generated/*.png 2>/dev/null || true
}

# Check for large files (>5MB)
echo "📏 Checking file sizes..."
large_files=$(git diff --cached --name-only | xargs ls -la 2>/dev/null | awk '$5 > 5242880 {print $9 " (" $5 " bytes)"}' || true)
if [ -n "$large_files" ]; then
  echo "⚠️  Large files detected (>5MB):"
  echo "$large_files"
  echo "Consider optimizing or using Git LFS for these files."
  # Don't exit - just warn
}

# Verify CLAUDE.md is up to date if scripts were modified
modified_scripts=$(git diff --cached --name-only | grep "scripts/\|package.json" || true)
if [ -n "$modified_scripts" ]; then
  echo "📚 Scripts modified - consider updating CLAUDE.md if new commands were added"
}

# Check for console.log in TypeScript files (excluding tests and build files)
echo "🧹 Checking for console.log statements..."
console_logs=$(git diff --cached --name-only | grep "\.ts$\|\.tsx$" | grep -v "test\|spec\|\.d\.ts" | xargs grep -n "console\.log" 2>/dev/null || true)
if [ -n "$console_logs" ]; then
  echo "⚠️  console.log statements found:"
  echo "$console_logs"
  echo "Consider removing or using proper logging before committing."
  # Don't exit - just warn
}

# Markdown linting for modified posts
if [ -n "$modified_posts" ]; then
  echo "📖 Linting markdown files..."
  if ! echo "$modified_posts" | xargs npx markdownlint-cli2 --config .markdownlint.json 2>/dev/null; then
    echo "⚠️  Markdown linting issues found. Run 'npx markdownlint-cli2 src/posts/*.md' to see details."
    # Don't exit - just warn for markdown linting
  fi
}

# Spell checking for modified posts
if [ -n "$modified_posts" ]; then
  echo "📝 Spell checking blog posts..."
  if ! echo "$modified_posts" | xargs npx cspell --config cspell.json --no-progress 2>/dev/null; then
    echo "⚠️  Spelling issues found. Run 'npx cspell src/posts/*.md' to see details."
    echo "💡 Add technical terms to cspell.json words array if needed."
    # Don't exit - just warn for spelling
  fi
}

# Link validation for modified posts (async, don't block)
if [ -n "$modified_posts" ]; then
  echo "🔗 Checking links in background..."
  (
    for file in $modified_posts; do
      npx markdown-link-check "$file" --config .markdown-link-check.json >/dev/null 2>&1 || \
      echo "⚠️  Broken links found in $file. Run 'npx markdown-link-check $file' to check manually."
    done
  ) &
}

# Image optimization check for any new images
new_images=$(git diff --cached --name-only | grep -E "\.(png|jpg|jpeg|webp|svg)$" || true)
if [ -n "$new_images" ]; then
  echo "🖼️  Checking image sizes..."
  large_images=$(echo "$new_images" | xargs ls -la 2>/dev/null | awk '$5 > 1048576 {print $9 " (" int($5/1024) "KB)"}' || true)
  if [ -n "$large_images" ]; then
    echo "⚠️  Large images detected (>1MB):"
    echo "$large_images"
    echo "💡 Consider optimizing these images before committing."
    # Don't exit - just warn
  fi
}

# Generate RSS feed and sitemap if posts were modified
if [ -n "$modified_posts" ]; then
  echo "📡 Regenerating RSS feed..."
  bun run generate-rss >/dev/null 2>&1
  git add dist/rss.xml 2>/dev/null || true
  
  echo "🗺️  Regenerating sitemap..."
  bun run generate-sitemap >/dev/null 2>&1
  git add dist/sitemap.xml dist/robots.txt 2>/dev/null || true
}

echo "✅ All pre-commit checks passed!"
