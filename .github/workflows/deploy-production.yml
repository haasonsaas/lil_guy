name: Deploy Production

on:
  push:
    branches: [main]

permissions:
  contents: read
  statuses: write
  deployments: write

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Pages Production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run type check
        run: bun run typecheck

      - name: Run linting
        run: bun run lint

      - name: Build project
        run: bun run build
        env:
          VITE_RESEND_API_KEY: ${{ secrets.VITE_RESEND_API_KEY }}
          VITE_EMAIL_TO: ${{ secrets.VITE_EMAIL_TO }}
          VITE_EMAIL_FROM: ${{ secrets.VITE_EMAIL_FROM }}

      - name: Run deployment health check
        run: bun run check:deploy
        env:
          VITE_RESEND_API_KEY: ${{ secrets.VITE_RESEND_API_KEY }}
          VITE_EMAIL_TO: ${{ secrets.VITE_EMAIL_TO }}
          VITE_EMAIL_FROM: ${{ secrets.VITE_EMAIL_FROM }}

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        id: deploy
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: '3'

      - name: Purge Cloudflare Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment via Cloudflare Pages',
              auto_merge: false,
              required_contexts: []
            });

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: '${{ steps.deploy.outputs.url }}',
              description: state === 'success' ? 'Production deployment successful' : 'Production deployment failed',
              context: 'deploy/production'
            });

      - name: Notify on success
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          echo "URL: ${{ steps.deploy.outputs.url }}"
          echo "Deployment ID: ${{ steps.deploy.outputs.id }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Check the logs above for details."
          exit 1