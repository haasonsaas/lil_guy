name: Performance Monitoring

on:
  # Run on main branch pushes
  push:
    branches: [main]
  # Run on PRs to main
  pull_request:
    branches: [main]
  # Run weekly to track performance trends
  schedule:
    - cron: '0 6 * * 1' # Monday at 6 AM UTC
  # Allow manual runs
  workflow_dispatch:
    inputs:
      url:
        description: 'Specific URL to audit (optional)'
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  performance-audit:
    runs-on: ubuntu-latest
    name: Core Web Vitals & Lighthouse Audit

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build for production
        run: bun run build
        env:
          VITE_RESEND_API_KEY: dummy
          VITE_EMAIL_TO: dummy
          VITE_EMAIL_FROM: dummy

      - name: Test performance monitoring
        run: |
          echo "🧪 Testing Core Web Vitals monitoring setup..."
          bun run perf:test > performance-test.log 2>&1
          
          echo "📊 Performance Test Results:"
          cat performance-test.log
          
          # Check if monitoring is working
          if grep -q "✅" performance-test.log; then
            echo "✅ Performance monitoring is functional"
          else
            echo "⚠️ Performance monitoring may have issues"
          fi

      - name: Run Lighthouse audit
        run: |
          echo "🔍 Running Lighthouse performance audit..."
          
          if [ -n "${{ github.event.inputs.url }}" ]; then
            bun run lighthouse -u "${{ github.event.inputs.url }}" -f json > lighthouse-results.json
          else
            bun run lighthouse -f json > lighthouse-results.json
          fi
          
          # Also generate summary for display
          bun run lighthouse -f summary > lighthouse-summary.txt

      - name: Analyze bundle performance
        run: |
          echo "📦 Analyzing bundle performance..."
          
          # Bundle size analysis
          TOTAL_SIZE=$(du -sh dist | cut -f1)
          JS_SIZE=$(find dist -name "*.js" -exec du -ch {} + | tail -1 | cut -f1)
          CSS_SIZE=$(find dist -name "*.css" -exec du -ch {} + | tail -1 | cut -f1)
          
          echo "Bundle Analysis:" > bundle-analysis.txt
          echo "- Total size: $TOTAL_SIZE" >> bundle-analysis.txt
          echo "- JavaScript: $JS_SIZE" >> bundle-analysis.txt
          echo "- CSS: $CSS_SIZE" >> bundle-analysis.txt
          
          # Check for performance budget violations
          TOTAL_MB=$(du -sm dist | cut -f1)
          if [ "$TOTAL_MB" -gt 25 ]; then
            echo "⚠️ Bundle size exceeds 25MB Cloudflare limit" >> bundle-analysis.txt
          fi
          
          # Analyze largest files
          echo "" >> bundle-analysis.txt
          echo "Largest files:" >> bundle-analysis.txt
          find dist -type f -size +100k -exec du -h {} + | sort -hr | head -10 >> bundle-analysis.txt

      - name: Generate performance report
        run: |
          echo "📈 Generating comprehensive performance report..."
          
          # Create markdown report
          cat > performance-report.md << 'EOF'
          # 🚀 Performance Report
          
          **Generated:** $(date)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ## 📊 Lighthouse Audit Results
          
          ```
          $(cat lighthouse-summary.txt)
          ```
          
          ## 📦 Bundle Analysis
          
          ```
          $(cat bundle-analysis.txt)
          ```
          
          ## 🧪 Monitoring Status
          
          ```
          $(tail -20 performance-test.log)
          ```
          
          ## 💡 Recommendations
          
          Based on the audit results:
          
          - ✅ Continue monitoring Core Web Vitals in production
          - 🔍 Review any performance budget violations
          - ⚡ Focus on optimizing metrics with poor ratings
          - 📱 Test on mobile devices for real-world performance
          
          ## 📈 Next Steps
          
          1. Monitor field data via Cloudflare Analytics
          2. Set up performance alerts for regressions
          3. Optimize any identified bottlenecks
          4. Track improvements over time
          
          EOF

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_number }}
          path: |
            lighthouse-results.json
            lighthouse-summary.txt
            bundle-analysis.txt
            performance-test.log
            performance-report.md
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the performance report
            let summary = '';
            try {
              summary = fs.readFileSync('lighthouse-summary.txt', 'utf8');
            } catch (e) {
              summary = 'Performance audit failed to generate summary.';
            }
            
            let bundleInfo = '';
            try {
              bundleInfo = fs.readFileSync('bundle-analysis.txt', 'utf8');
            } catch (e) {
              bundleInfo = 'Bundle analysis not available.';
            }
            
            const comment = `## 🚀 Performance Audit Results
            
            ### 📊 Lighthouse Scores
            \`\`\`
            ${summary}
            \`\`\`
            
            ### 📦 Bundle Analysis
            \`\`\`
            ${bundleInfo}
            \`\`\`
            
            ### 📈 Performance Monitoring
            - ✅ Core Web Vitals monitoring is active
            - 🔍 Real-time metrics collection enabled
            - 📊 Dashboard available in development mode
            
            **Note:** This audit runs on simulated data. Monitor real field data via Cloudflare Analytics.
            
            <details>
            <summary>📋 Performance Checklist</summary>
            
            - [ ] All Core Web Vitals in "good" range
            - [ ] Bundle size under performance budget
            - [ ] No large unoptimized images
            - [ ] Monitoring endpoints functional
            - [ ] Performance dashboard working
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Create performance issue on degradation
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # This would check for performance regressions and create issues
          # For now, just log that we would monitor for regressions
          echo "🔍 Would check for performance regressions against baseline"
          echo "📊 Would create issue if Core Web Vitals degrade significantly"
          echo "⚡ Real implementation would compare against historical data"

      - name: Update performance documentation
        if: github.event_name == 'schedule'
        run: |
          echo "📚 Weekly performance report generated"
          echo "📊 Consider updating performance documentation with trends"
          echo "🎯 Review performance goals and budgets"